{
    "$schema": "https://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
        "implicitReturn": {
            "type": "boolean",
            "description": "If true, functions will automatically return the last evaluated expression in a code block inside of it.",
            "default": false
        },
        "trailingComma": {
            "type": "string",
            "enum": ["always", "never", "single_tuple_only"],
            "enumDescriptions": [
                "Always allow trailing commas",
                "Never allow trailing commas",
                "Only allow in single-element tuples"
            ],
            "default": "always"
        },
        "semicolonRequired": {
            "type": "boolean",
            "description": "Determines whether semicolon are required to terminate a statement.",
            "default": false
        },
        "softKeywords": {
            "type": "boolean",
            "description": "If true, keywords can be used as identifiers in non-keyword contexts.",
            "default": false
        },
        "codeBlocks": {
            "title": "Code Blocks",
            "type": "string",
            "description": "How Sapphire should consider as a code block",
            "enum": [
                "indentation",
                "braces",
                "end"
            ],
            "enumDescriptions": [
                "Uses curly braces (`{...}`) as code blocks",
                "Use indentation to indicate code blocks",
                "Use the `end` keyword to end a code block"
            ],
            "$comment": "Change this back to 'indentation' once I can make it a thing",
            "default": "braces"
        }
    },
    "patternProperties": {
        "mutableValueAssignmentBehaviou?r": {
            "title": "Mutable Value Assignment Behavior",
            "description": "Determines the behavior when a variable that contains a mutable value (e.g. a list) is used as the value expression in an assignment statement.",
            "type": "string",
            "enum": [
                "copy",
                "reference"
            ],
            "enumDescriptions": [
                "Copies the value and assign the copy to the variable. This behavior is generally more predictable, at the cost of some extra memory.",
                "Assign the variable a reference to the existing value."
            ],
            "default": "copy"
        }
    },
    "additionalProperties": false
}
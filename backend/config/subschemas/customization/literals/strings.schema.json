{
    "type": "object",
    "$defs": {
        "escapeSymbol": {
            "type": "string",
            "enum": [
                "backslash",
                "double"
            ],
            "enumDescriptions": [
                "Use a backslash prefix (e.g. \\$)",
                "Use a caret prefix (e.g. ^$)",
                "Type the symbol twice (e.g. }})"
            ]
        },
        "stringDelimeters": {
            "type": "array",
            "items": {"enum": ["\"", "'", "`"]},
            "uniqueItems": true,
            "minItems": 1,
            "additionalItems": false,
            "default": ["\"", "'", "`"]
        },
        "accessibility": {
            "type": "string",
            "enum": [
                "never",
                "enable_by_prefix",
                "enable_by_delimeter",
                "disable_by_prefix",
                "disable_by_delimeter",
                "always"
            ]
        }
    },
    "properties": {
        "interpolation": {
            "type": "object",
            "properties": {
                "accessibility": {
                    "allOf": [{"$ref": "#/$defs/accessibility"}],
                    "description": "Determine whether how string interpolation will be accessed.",
                    "enumDescriptions": [
                        "Disable string interpolation entirely",
                        "Enable string interpolation by adding a prefix before the string",
                        "Enable string interpolation using a special delimeter",
                        "Enable string interpolation by default. You may disable it using a string prefix",
                        "Enable string interpolation by default. You may disable it using one, or more specific string delimeter",
                        "Always enable string interpolation, with no way to disable it."
                    ]
                },
                "expressionSyntax": {
                    "type": "object",
                    "enum": [
                        {"start": "{", "end": "}"},
                        {"start": "${", "end": "}"},
                        {"start": "#{", "end": "}"},
                        {"start": "\\{", "end": "}"},
                        {"start": "%{", "end": "}"},
                        {"start": "[", "end": "]"},
                        {"start": "$[", "end": "]"},
                        {"start": "#[", "end": "]"},
                        {"start": "\\[", "end": "]"},
                        {"start": "%[", "end": "]"},
                        {"start": "(", "end": ")"},
                        {"start": "$(", "end": ")"},
                        {"start": "#(", "end": ")"},
                        {"start": "\\(", "end": ")"},
                        {"start": "%(", "end": ")"}
                    ],
                    "enumDescriptions": [
                        "Use by Python, Scala, Nim and PHP",
                        "Use by JS, Bash, Dart, Groovy and Kotlin",
                        "Use by Ruby and CoffeeScript",
                        "Use by Java 21 and 22",
                        "Use by Swift",
                        "",
                        "Use by Julia",
                        "",
                        "",
                        "",
                        ""
                    ]
                },
                "allowIdentifierSyntax": {
                    "type": "boolean"
                },
                "identifierPrefixSyntax": {
                    "type": "string",
                    "enum": [
                        "$", "#", "\\", "%"
                    ],
                    "enumDescriptions": [
                        "Use by Bash, Dart, Groovy, Julia, Kotlin, Perl, PHP and Scala", "", "", ""
                    ]
                },
                "bracketEscapeMethod": {
                    "oneOf": [
                        {"$ref": "#/$defs/bracketEscapeSymbol"},
                        {
                            "type": "object",
                            "properties": {
                                "opening": {"$ref": "#/$defs/bracketEscapeSymbol"},
                                "closing": {"$ref": "#/$defs/bracketEscapeSymbol"}
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                "forceEscapeClosingBracket": {
                    "type": "boolean",
                    "description": "Determines whether the matching closing bracket in a formatted string must be escaped",
                    "default": true
                },
                "delimeterSyntax": {
                    "description": "Determine the specific string delimeters use to either enable or disable interpolation.\nThis option is ignored if the 'acceessibility' field is not 'disable_by_delimeter' or 'enable_by_delimeter'.\nAll quotes in this option MUST also be included that are already in the root 'stringDelimeters' option.",
                    "$ref": "#/$defs/stringDelimeters"
                },
                "prefixSyntax": {
                    "description": "Determine the prefix use to either enable or disable interpolation.\nThis option is ignored if the 'acceessibility' field is not 'disable_by_format' or 'enable_by_delimeter'",
                    "enum": ["f", "i", "$"],
                    "default": "f"
                }
            },
            "additionalProperties": false
        },
        "multiline": {
            "type": "object",
            "properties": {
                "accessibility": {
                    "allOf": [{"$ref": "#/$defs/accessibility"}]
                },
                "delimeterSyntax": {
                    "oneOf": [
                        {
                            "type": "string",
                            "enum": ["triple"]
                        },
                        {"$ref": "#/$defs/stringDelimeters"}
                    ]
                },
                "prefixSyntax": {
                    "type": "string",
                    "enum": ["m"]
                }
            }
        },
        "delimeters": {"$ref": "#/$defs/stringDelimeters"},
        "rawString": {
            "type": "object",
            "properties": {
                "acceessibility": {"$ref": "#/$defs/acceessibility"},
                "delimeterSyntax": {"$ref": "#/$defs/stringDelimeters"},
                "prefixSyntax": {
                    "type": "string",
                    "enum": ["r", "l"],
                    "default": "r"
                }
            }
        },
        "byteString": {
            "type": "object",
            "properties": {
                "acceessibility": {"$ref": "#/$defs/acceessibility"},
                "delimeterSyntax": {"$ref": "#/$defs/stringDelimeters"},
                "prefixSyntax": {
                    "type": "string",
                    "enum": ["b"],
                    "default": "b"
                }
            }
        },
        "escapePattern": {
            "type": "object",
            "description": "Determine what symbol will be used as a replacement to some special character. \nNote: \n1. You can set any of the option to null to disable it.\n2. Certain symbols will only be taken into effect if they have a special purpose given to it.",
            "properties": {
                "*": {
                    "description": "This will be used for every character that is not already explicitly filled",
                    "enum": [
                        "backslash",
                        "caret",
                        "backtick",
                        null
                    ],
                    "default": "backslash"
                },
                "null": {
                    "enum": ["\\0", "`0", "^0",
                            "\\@", "`@", "^@",
                            null],
                    "default": "\\0"
                },
                "bell": {
                    "enum": ["\\a", "`a", "^a",
                             "\\G", "`G", "^G",
                             "\\ðŸ””", "`ðŸ””", "^ðŸ””",
                             null],
                    "default": "\\a"
                },
                "backspace": {
                    "enum": ["\\b", "`b", "^b",
                             "\\H", "`H", "^H",
                             null],
                    "default": "\\b"
                },
                "horizontalTabulation": {
                    "enum": ["\\t", "`t", "^t",
                            "\\I", "`I", "^I",
                            null],
                    "default": "\\t"
                },
                "newLine": {
                    "enum": ["\\n", "`n", "^n",
                             "\\J", "`J", "^J",
                             null],
                    "default": "\\n"
                },
                "verticalTabulation": {
                    "enum": ["\\v", "`v", "^v",
                             "\\K", "`K", "^K",
                             null],
                    "default": "\\v"
                },
                "formFeed": {
                    "enum": ["\\f", "`f", "^f",
                             "\\L", "`L", "^L",
                             null],
                    "default": "\\f"
                },
                "carriageReturn": {
                    "enum": ["\\r", "`r", "^r",
                             "\\M", "`M", "^M",
                             null],
                    "enumDescriptions": [
                        "C escape sequence",
                        "Alternate escape sequence",
                        "Caret notation",
                        "Disabled"
                    ],
                    "default": "\\r"
                },
                "escape": {
                    "enum": ["\\e", "`e", "^e",
                             "\\[", "`[", "^[",
                             null],
                    "default": "\\e"
                },
                "backtick": {
                    "enum": ["\\`", "``", "^`", null],
                    "default": "\\`"
                },
                "doubleQuote": {
                    "enum": ["\\\"", "`\"", "^\"", null],
                    "default": "\\\""
                },
                "singleQuote": {
                    "enum": ["\\'", "`'", null],
                    "default": "\\'"
                },
                "backslash": {
                    "enum": ["\\\\", "^\\", "`\\", null],
                    "default": "\\\\"
                },
                "caret": {
                    "enum": ["^^", "`^", "\\^", null],
                    "default": "^^"
                },
                "dollar": {
                    "enum": ["$$", "\\$", "`$", "^$", null],
                    "default": "\\$"
                },
                "hash": {
                    "enum": ["##", "\\#", "`#", "^#", null],
                    "default": "\\#"
                },
                "percent": {
                    "enum": ["%%", "\\%", "`%", "^%", null],
                    "default": "\\%"
                },
                "openParenthesis": {
                    "enum": ["((", "\\(", "`(", "^(", null],
                    "default": "(("
                },
                "closeParenthesis": {
                    "enum": ["((", "\\(", "`(", "^(", null],
                    "default": "(("
                },
                "openSquareBracket": {
                    "enum": ["[[", "\\[", "`[", "^[", null],
                    "default": "[["
                },
                "closeSquareBracket": {
                    "enum": ["]]", "\\]", "`]", "^]", null],
                    "default": "]]"
                },
                "openCurlyBrace": {
                    "enum": ["{{", "\\{", "`{", "^{", null],
                    "default": "{{"
                },
                "closeCurlyBrace": {
                    "enum": ["}}", "\\}", "`}", "^}", null],
                    "default": "}}"
                }
            },
            "additionalProperties": false
        }
    }
}
{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"templates":{"$defs":{"modeProperty":{"oneOf":[{"type":"string","enum":["disabled","enabled","forced"],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation","Enables the mode, replacing its built-in equivalent implementation"]},{"type":"number","enum":[0,1,2],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation","Enables the mode, replacing its built-in equivalent implementation"]},{"type":"boolean","enum":[false,true],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation"]}]},"unforcedModeProperty":{"oneOf":[{"type":"string","enum":["disabled","enabled"]},{"type":"number","enum":[0,1]},{"type":"boolean","enum":[false,true]}],"enumDescriptions":["Disables the mode","Enables the mode"]}},"type":"object","description":"A field where you can enable certain set configurations, which usually contain breaking syntax changes.","additionalProperties":false,"properties":{"languagePresets":{"type":"object","properties":{"javascript":{"$ref":"#/$defs/unforcedModeProperty"},"java":{"$ref":"#/$defs/unforcedModeProperty"},"python":{"$ref":"#/$defs/unforcedModeProperty"},"typescript":{"$ref":"#/$defs/unforcedModeProperty"},"c":{"$ref":"#/$defs/unforcedModeProperty"},"cpp":{"$ref":"#/$defs/unforcedModeProperty"},"kotlin":{"$ref":"#/$defs/unforcedModeProperty"},"swift":{"$ref":"#/$defs/unforcedModeProperty"},"perl":{"$ref":"#/$defs/unforcedModeProperty"},"coffeescript":{"$ref":"#/$defs/unforcedModeProperty"},"cs":{"$ref":"#/$defs/unforcedModeProperty"},"ruby":{"$ref":"#/$defs/unforcedModeProperty"},"elixir":{"$ref":"#/$defs/unforcedModeProperty"},"rust":{"$ref":"#/$defs/unforcedModeProperty"},"haskell":{"$ref":"#/$defs/unforcedModeProperty"}}},"invertedComparisons":{"$ref":"#/$defs/modeProperty"},"methify":{"$ref":"#/$defs/unforcedModeProperty"}}},"configVersion":{"type":"object","description":"Indicates the version of the configuration file, which supports SemVar or EpochSemVar.\nIt can either be an array containing numbers or a string containing the version","properties":{"major":{"type":"integer","minimum":0},"minor":{"type":"integer","minimum":0},"patch":{"type":"integer","minimum":0},"phase":{"type":"string","enum":["indev","alpha","beta","release"],"default":"indev"}}},"customOptions":{"type":"object","description":"A field where you can assign it with anything you want. The only requirement for this field is that it should be an object.\nThis is intended for external tools, like linters, to put their own configurations into a single configuration file, for both convenience and cleanliness. Of course, other uses (aside for malicious purposes) are also welcome.\nIt is recommended to make a schema to check for the fields inside of this file.","additionalProperties":true,"$comment":"Is this description too long and unnessecary? It's probably too long and unnessecary..."},"advancedMode":{"type":"boolean","description":"If true, disable guardrails on complicated features that might not be beginner-friendly.\n\"With great power comes great responsibility.\"","default":false},"masochisticMode":{"type":"boolean","description":"An advanced option.\nIf true, disable guardrails that would otherwise make the language experience, at least, tolorable.\nFor anyone who enable this: Good luck. And have fun.","default":false}},"patternProperties":{"customi(z|s)ation":{"type":"object","title":"Language Customization","description":"A place to add customization that can modify how the compiler treats the code.\nThis can range from minor behavior changes to imcompatible syntax modifiers.\nAlso the simplest way to cause chaos for anyone that doesn't use a proper linter for whatever reason.","properties":{"annotations":{"type":"object","properties":{"enabled":{"type":"boolean","description":"If true, type annotations will be enabled","default":true}}},"literals":{"type":"object","properties":{"numbers":{"type":"object","properties":{"numericSeparator":{"type":"object","properties":{"enabled":{"type":"boolean","description":"If true, numberic literals can have underscores in them as separators.","default":true},"syntax":{"type":"string","enum":["_"," "],"default":"_"}}},"integerBaseLiterals":{"type":"object","properties":{"octal":{"type":"boolean","default":true},"hexadecimal":{"type":"boolean","default":true},"decimal":{"type":"boolean","default":true},"binary":{"type":"boolean","default":true}},"additionalProperties":false},"scientificNotation":{"type":"boolean","description":"Determines whether scientific notation (e.g. 3e15) is allowed.","default":true}}},"booleans":{"type":"object","properties":{"enabled":{"description":"Determines whether you can use booleans","type":"boolean","default":true},"caseInsensitivity":{"title":"Case Insensitive Booleans","description":"Determines whether booleans are case-insensitive","type":"boolean","default":true},"trueSyntax":{"type":"string","description":"Note: If 'languageCustomization.caseInsensitiveBooleans' is disabled, certain options allowed will act identically","enum":["true","True","TRUE","yes","Yes","y","Y","Affirmative","ye","yup","yay"],"enumDescriptions":["The standard notation, use in most languages","Use by Python","Use by Excel","Use as a alternate way of saying 'true' by YAML","Use as a alternate way of saying 'true' by YAML","Use as a alternate way of saying 'true' by YAML","Use as a alternate way of saying 'true' by YAML","A polite way of saying 'true'","An informal way of saying 'true'","An informal way of saying 'true'","An informal way of saying 'true'"],"default":"true"},"falseSyntax":{"type":"string","description":"Note: If 'languageCustomization.caseInsensitiveBooleans' is disabled, certain options allowed will act identically","enum":["false","False","FALSE","no","No","n","N","Negative","nah","nope","nay"],"enumDescriptions":["The standard notation, use in most languages","Use by Python","Use by Excel","Use as a alternate way of saying 'false' by YAML","Use as a alternate way of saying 'false' by YAML","Use as a alternate way of saying 'false' by YAML","Use as a alternate way of saying 'false' by YAML","A polite way of saying 'false'","An informal way of saying 'false'","An informal way of saying 'false'","An informal way of saying 'false'"],"default":"false"},"treatAs":{"type":"string","enum":["keyword","mutableVariable","constantVariable"],"default":"keyword"}}},"strings":{"type":"object","$defs":{"bracketEscapeSymbol":{"type":"string","enum":["backslash","double"],"enumDescriptions":["Use a backslash prefix (e.g. \\$)","Type the symbol twice (e.g. }})"]},"stringDelimeters":{"type":"array","items":{"enum":["\"","'","`"]},"uniqueItems":true,"minItems":1,"additionalItems":false,"default":["\"","'","`"]},"accessibility":{"type":"string","enum":["never","enable_by_prefix","enable_by_delimeter","disable_by_prefix","disable_by_delimeter","always"]}},"properties":{"interpolation":{"type":"object","properties":{"accessibility":{"allOf":[{"$ref":"#/$defs/accessibility"}],"description":"Determine whether how string interpolation will be accessed.","enumDescriptions":["Disable string interpolation entirely","Enable string interpolation by adding a prefix before the string","Enable string interpolation using a special delimeter","Enable string interpolation by default. You may disable it using a string prefix","Enable string interpolation by default. You may disable it using one, or more specific string delimeter","Always enable string interpolation, with no way to disable it."]},"expressionSyntax":{"type":"object","enum":[{"start":"{","end":"}"},{"start":"${","end":"}"},{"start":"#{","end":"}"},{"start":"\\{","end":"}"},{"start":"%{","end":"}"},{"start":"[","end":"]"},{"start":"$[","end":"]"},{"start":"#[","end":"]"},{"start":"\\[","end":"]"},{"start":"%[","end":"]"},{"start":"(","end":")"},{"start":"$(","end":")"},{"start":"#(","end":")"},{"start":"\\(","end":")"},{"start":"%(","end":")"}],"enumDescriptions":["Use by Python, Scala, Nim and PHP","Use by JS, Bash, Dart, Groovy and Kotlin","Use by Ruby and CoffeeScript","Use by Java 21 and 22","Use by Swift","","Use by Julia","","","",""]},"allowIdentifierSyntax":{"type":"boolean"},"identifierPrefixSyntax":{"type":"string","enum":["$","#","\\","%"],"enumDescriptions":["Use by Bash, Dart, Groovy, Julia, Kotlin, Perl, PHP and Scala","","",""]},"bracketEscapeMethod":{"oneOf":[{"$ref":"#/$defs/bracketEscapeSymbol"},{"type":"object","properties":{"opening":{"$ref":"#/$defs/bracketEscapeSymbol"},"closing":{"$ref":"#/$defs/bracketEscapeSymbol"}},"additionalProperties":false}]},"forceEscapeClosingBracket":{"type":"boolean","description":"Determines whether the matching closing bracket in a formatted string must be escaped","default":true},"delimeterSyntax":{"$ref":"#/$defs/stringDelimeters"},"prefix":{"description":"Determine the prefix use to either enable or disable interpolation.\nThis option is ignored if the 'acceessibility' field is not 'disable_by_format' or 'enable_by_delimeter'","enum":["f","i"],"default":"f"}},"additionalProperties":false},"multiline":{"type":"object","properties":{"accessibility":{"allOf":[{"$ref":"#/$defs/accessibility"}]},"delimeterSyntax":{"oneOf":[{"type":"string","enum":["triple"]},{"$ref":"#/$defs/stringDelimeters"}]},"prefixSyntax":{"type":"string","enum":["m"]}}},"delimeters":{"$ref":"#/$defs/stringDelimeters"},"rawString":{"type":"object","properties":{"":{}}}}},"ellipsis":{"type":"object","properties":{"enabled":{"description":"Determines whether you can use the ellipsis value (...)","type":"boolean","default":true}}},"null":{"type":"object","properties":{"enabled":{"description":"Determines whether you can use null","type":"boolean","default":true},"caseInsensitivity":{"title":"Case Insensitive Null","description":"Determines whether null is case-insensitive","type":"boolean","default":true},"syntax":{"type":"string","description":"Note: If 'languageCustomization.caseInsensitiveNull' is disabled, certain options allowed will act identically","enum":["null","Null","NULL","None","none","NOTHING","nothing","Nothing","undefined","nil"],"enumDescriptions":["The standard notation, use in most languages","The standard notation with a different casing","The standard notation with a different casing","Use by Python","Python's notation with a different casing","Python's notation with a different casing","An alternate way of spelling 'null'","An alternate way of spelling 'null'","An alternate way of spelling 'null'","An alternate way of spelling 'null'","Use by Ruby"],"default":"null"}}}},"additionalProperties":false},"comments":{"$schema":"https://json-schema.org/draft-07/schema#","type":"object","properties":{"inlineComment":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["#","//","%",";","--","::","rem"],"enumDescriptions":["Use by Python, Powershell, Ruby, Bash, Perl, Julia, YAML, TOML, CoffeeScript and R, among others","Use by most C-styled languages. Note that, since this symbol matches the default floor division operator, you'd need to either redefine or disable it.","Use by MATLAB. Note that, since this symbol matches the default modulus operator, you'd need to either redefine or disable it.","Use by Assembly and AutoHotKey.","Use by Haskell and Lua","Use by Batch","Use by Batch"],"default":"#"},"spaceRequired":{"type":"boolean","description":"Determine whether it is required to have an extra space after the single-line comment syntax for it to be consider as a comment."}}},"multilineComment":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"object","enum":[{"start":"/*","end":"*/"},{"start":"###","end":"###"},{"start":"#=","end":"=#"},{"start":"#*","end":"*#"},{"start":"(*","end":"*)"},{"start":"<!--","end":"-->"},{"start":"{#","end":"#}"},{"start":"{{!--","end":"--}}"},{"start":"{{--","end":"--}}"},{"start":"--[[","end":"]]"},{"start":"#|","end":"|#"},{"start":"%{","end":"}%"}],"enumDescriptions":["Use by most languages","Use by CoffeeScript","Use by Julia","Use by Velocity","Use by F#","Use by HTML, Markdown, XML among others","Use by Django, Genshi (not to be confused with Genshin) and Jinja","Use by Handlebars","Use by Laravel","Use by Lua","Use by Lisp","Use by MATLAB"],"default":{"start":"/*","end":"*/"}}}}}},"controlFlow":{"type":"object","properties":{"conditional":{"type":"object","properties":{"classic":{"type":"object","properties":{"enabled":{"type":"boolean","description":"Determines whether the classic conditional statement is usable.\nTurn this off if you're feeling masochistic.","default":true},"enableInvertedIf":{"type":"boolean","description":"Determines whether an inverted conditional statement can be used.","default":false},"syntax":{"type":"object","properties":{"conditonal":{"enum":["if"],"default":"if"},"unless":{"enum":["unless","if not"],"default":"if"},"fallbackWithCondition":{"type":"string","enum":["elseif","else if","elif","elsif","perchance","assuming","but what about if"],"enumDescriptions":["Use by Ruby","Use by a majority of C-based languages","Use by Python","Use by Perl","A alternate, formal way","A alternate, formal way","Its design is very human"],"default":"elif"},"fallback":{"enum":["else","otherwise"],"default":"else"}}}}},"matchCase":{"$ref":"matchSwitchCase.schema.json","properties":{"patternMatching":{"type":"object","properties":{"enabled":{"description":"Determine whether pattern matching is allowed in a match-case statement. If disable, the match-case statement is equivalent to the switch-case statement.","default":false}}},"syntax":{"type":"object","properties":{"defaultCaseSyntax":{"title":"Notation for the default case in a match/case statement."},"statement":{"default":"match"}}}}},"switchCase":{"allOf":[{"$ref":"matchSwitchCase.schema.json"}],"properties":{"patternMatching":{"type":"object","properties":{"enabled":{"description":"Determine whether pattern matching is allowed in a switch-case statement. If enabled, the switch-case statement is equivalent to the match-case statement.","default":false}}},"syntax":{"type":"object","properties":{"defaultCaseSyntax":{"title":"Notation for the default case in a switch/case statement."},"statement":{"default":"switch"}}}}}}},"exceptionHandling":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"tryStatement":{"type":"object","properties":{"syntax":{"enum":["try"],"default":"try"}},"additionalProperties":false},"handlingException":{"type":"object","properties":{"optionalErrorBinding":{"type":"boolean","description":"Allow omitting the error variable in catch blocks.","default":true},"syntax":{"type":"string","enum":["catch","except","rescue"],"enumDescriptions":["Use by most languages","Use by Python","Use by ?"],"default":"catch"}},"additionalProperties":false},"noExceptions":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"enum":["else","otherwise"],"default":"else"}}},"finalCleanup":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"enum":["finally","ensure"],"enumDescriptions":["Use by most languages","Use by ?"],"default":"finally"}}},"throwError":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"enum":["throw","raise","panic","die"],"enumDescriptions":["Use by most languages","Use by Python and Dart","Use by Rust, although not as a statement","Use by Perl 5"],"default":"throw"}}}}},"jumping":{"type":"object","properties":{"enabled":{"type":"boolean","description":"Determines whether `goto` or similar jump statements are allowed","default":false}}}},"additionalProperties":false},"variables":{"type":"object","properties":{"implicitGlobals":{"type":"boolean","description":"If true, variables will be global by default unless clearly specified.","default":false},"functionHoisting":{"type":"boolean","description":"If true, function declarations will be run before anything else.","default":true}}},"objects":{"type":"object","properties":{"classes":{"$schema":"https://json-schema.org/draft-07/schema#","type":"object","properties":{"syntax":{"type":"object","properties":{"keyword":{"classDef":{"type":"string","enum":["class","cls"],"enumDescriptions":["The standard notation, use by most languages","An optional shorthand. It's unknown whether it's used anywhere."],"default":"class"}}}}},"additionalProperties":false},"functions":{"$schema":"https://json-schema.org/draft-07/schema#","type":"object","properties":{"syntax":{"type":"object","properties":{"keyword":{"enum":["def","fn","function","fun","func","define"],"enumDescriptions":["Use by Python","Use by Rust","Use by JavaScript","Use by Kotlin","Use by Go","An extended version of 'def'"],"default":"fn"}}},"arguments":{"properties":{"allowKeywordArguments":{"type":"boolean","default":true}},"patternProperties":{"mutableValueAsDefaultBehaviou?r":{"title":"Mutable Argument Default Value Behavior","description":"Determines the behavior when a value that contains a mutable value (e.g. a list) is used as the default value for an argument in a function.","type":"string","enum":["copy","reference"],"enumDescriptions":["Copies the value and assign the copy to the argument, should it ever be undefined. This behavior is a lot more predictable, at the cost of some extra time processing the value, every call.","Assign the variable a reference to the existing value."],"default":"copy"}}}},"additionalProperties":false},"enums":{}}},"oop":{"type":"object","properties":{"oopModel":{"type":"string","title":"OOP Model","enum":["class","prototype","hybrid"],"enumDescriptions":["Use class-based OOP as its OOP model","Use prototype-based OOP from JavaScript as its OOP model","Use both class-based OOP and prototype-based OOP"],"default":"class"},"forcedEncapsulation":{"title":"Forced Encapsulation","type":"boolean","enum":[true,false],"enumDescriptions":["Enforced encapsulation","Uses Python's conventions, by mangling the names of both protected and private methods in places that they shouldn't get accessed"],"default":true},"encapsulationMethod":{"title":"Encapsulation Method","description":"Determines how will Sapphire determine the acceessibility of an attribute.","type":"string","enum":["enforced","pythonic","disabled"],"enumDescriptions":["Use keywords (`private`, `protected`, `public`)","Uses Pythonic naming conventions. Note that, when `forcedEncapsulation` is set to true, a single-underscore prefix name is analogous to `protected` and a double-underscore prefix name is analogous to `private`.","All methods and attributes will be public regardless of what. Not recommended."],"default":"enforced"}}},"operators":{"type":"object","properties":{"logical":{"type":"object","properties":{"exclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["xor","^^","^"],"default":"xor"}},"additionalProperties":false},"inclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["or","||","ior","|"],"default":"or"}},"additionalProperties":false},"and":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["and","&&","&"],"default":"and"}},"additionalProperties":false}},"additionalProperties":false},"arithmetic":{"type":"object","properties":{"addition":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["+"],"default":"+"}},"additionalProperties":false},"subtraction":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["-"],"default":"-"}},"additionalProperties":false},"multiplication":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["*"],"default":"*"}},"additionalProperties":false},"trueDivision":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["/"],"default":"/"}},"additionalProperties":false},"floorDivision":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["//","div"],"enumDescriptions":["Use by Python","Use by Pascal"],"default":"//"}},"additionalProperties":false},"modulus":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["%","mod"],"enumDescriptions":["Use by most languages","Use by C"],"default":"%"}},"additionalProperties":false},"exponentiation":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["**","^","exp","pow"],"default":"**"}},"additionalProperties":false}}},"comparison":{"type":"object","properties":{"equality":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["==","===","!><","!<>","-eq"],"enumDescriptions":["The standard notation, used in most languages","JS's symbol for strict equality","","","Use by PowerShell"],"default":"=="}}},"inequality":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["!=","><","<>","!=="],"enumDescriptions":["The standard notation, use in most languages","It looks like a face I suppose...","A more uncommon symbol. Use by Pascal and Python prior to 3.0","JavaScript's symbol for strict inequality"],"default":"!="}}},"looseEquality":{"type":"object","properties":{"enabled":{"type":"boolean","default":false},"equalitySyntax":{"type":"string","enum":["~=","=="],"enumDescriptions":["Default, use to differentiate from ==","Use by JS"],"default":"~="},"inequalitySyntax":{"type":"string","enum":["!~=","~!=","~<>","~><","!="],"enumDescriptions":["","","","","Use by JS"],"default":"!~="}}},"spaceshipOperator":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":["string","null"],"enum":["<=>",">=<",null],"enumDescriptions":["The standard notation, use by most languages that has it","It looks like a quirky face I suppose...","Disable the spaceship operator entirely"],"default":"<=>"}}}}},"binary":{"type":"object","properties":{"exclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["xor","^^","^","b^"],"default":"b^"}},"additionalProperties":false},"inclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["or","||","ior","|","b|"],"default":"b|"}},"additionalProperties":false},"and":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["and","&&","&","b&"],"default":"b&"}},"additionalProperties":false}},"additionalProperties":false},"booleans":{"type":"object","properties":{"exclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["xor","^^","^"],"default":"^"}},"additionalProperties":false},"inclusiveOr":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["or","||","ior","|"],"default":"|"}},"additionalProperties":false},"and":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["and","&&","&"],"default":"&"}},"additionalProperties":false}},"additionalProperties":false},"other":{"type":"object","properties":{"stringConcanentation":{"type":"object","properties":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["..","||"],"default":".."}},"additionalProperties":false},"matrixMultiplication":{"enabled":{"type":"boolean","default":true},"syntax":{"type":"string","enum":["@"],"default":"@"}}}},"binaryExpressionNotation":{"title":"Operator Notation","type":"string","description":"This will change how Sapphire parse operators.","enum":["infix","prefix","postfix"],"enumDescriptions":["Infix notation: `a + b`","Prefix notation: `+ a b`","Postfix notation: `a b +`"],"default":"infix"}},"additionalProperties":false},"uncategorized":{"$schema":"https://json-schema.org/draft-07/schema#","type":"object","properties":{"implicitReturn":{"type":"boolean","description":"If true, functions will automatically return the last evaluated expression in a code block inside of it.","default":false},"trailingComma":{"type":"string","enum":["always","never","single_tuple_only"],"enumDescriptions":["Always allow trailing commas","Never allow trailing commas","Only allow in single-element tuples"],"default":"always"},"semicolonRequired":{"type":"boolean","description":"Determines whether semicolon are required to terminate a statement.","default":false},"softKeywords":{"type":"boolean","description":"If true, keywords can be used as identifiers in non-keyword contexts.","default":false},"codeBlocks":{"title":"Code Blocks","type":"string","description":"How Sapphire should consider as a code block","enum":["indentation","braces","end"],"enumDescriptions":["Uses curly braces (`{...}`) as code blocks","Use indentation to indicate code blocks","Use the `end` keyword to end a code block"],"default":"braces","$comment":"Change this back to 'indentation' once I can make it a thing"}},"patternProperties":{"mutableValueAssignmentBehaviou?r":{"title":"Mutable Value Assignment Behavior","description":"Determines the behavior when a variable that contains a mutable value (e.g. a list) is used as the value expression in an assignment statement.","type":"string","enum":["copy","reference"],"enumDescriptions":["Copies the value and assign the copy to the variable. This behavior is generally more predictable, at the cost of some extra memory.","Assign the variable a reference to the existing value."],"default":"copy"}},"additionalProperties":false}}}},"additionalProperties":false,"$comment":"Stuck with Draft 7 because the validator has a skill issue ;-;\nAlso why do I have to use this specific key thingy to comment something >:(","$defs":{"modeProperty":{"oneOf":[{"type":"string","enum":["disabled","enabled","forced"],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation","Enables the mode, replacing its built-in equivalent implementation"]},{"type":"number","enum":[0,1,2],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation","Enables the mode, replacing its built-in equivalent implementation"]},{"type":"boolean","enum":[false,true],"enumDescriptions":["Disables the mode","Enables the mode, while maintaining its built-in equivalent implementation"]}]},"unforcedModeProperty":{"oneOf":[{"type":"string","enum":["disabled","enabled"]},{"type":"number","enum":[0,1]},{"type":"boolean","enum":[false,true]}],"enumDescriptions":["Disables the mode","Enables the mode"]},"bracketEscapeSymbol":{"type":"string","enum":["backslash","double"],"enumDescriptions":["Use a backslash prefix (e.g. \\$)","Type the symbol twice (e.g. }})"]},"stringDelimeters":{"type":"array","items":{"enum":["\"","'","`"]},"uniqueItems":true,"minItems":1,"additionalItems":false,"default":["\"","'","`"]},"accessibility":{"type":"string","enum":["never","enable_by_prefix","enable_by_delimeter","disable_by_prefix","disable_by_delimeter","always"]}}}
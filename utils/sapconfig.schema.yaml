$schema: http://json-schema.org/draft-07/schema#
type: object
properties:
    languageCustomization:
        type: object
        description: >-
            A place to add customization that can modify 
            how the compiler treats the code.

            This can range from minor behaviour changes 
            to imcompatible syntax modifiers.

            Also the simplest way to cause chaos for 
            anyone that doesn't use a proper linter.
        properties:
            redefine:
                type: object
                description: >-
                    An object containing possible overrides for
                    certain symbols and keywords in the language.
                properties:
                    notEqual:
                        type: string
                        enum: ['!=', '><', '<>']
                    functionDef:
                        oneOf:
                        - const: def
                          description: Python-style def.
                        - const: fn
                          description: Rust-style fn.
                        - const: function
                          description: JavaScript-style function.
                        - const: fun
                          description: Kotlin-style fun.
                        - const: func
                          description: I forgor
                    classDef:
                        type: string
                        enum: [cls, class]
                    elseIf:
                        oneOf: 
                        - const: elseif
                          description: Ruby-style elseif.
                        - const: else if
                          description: C-style two-token else-if.
                        - const: elif
                          description: Python-style elif.
                        - const: elsif
                          description: Perl-style elsif.
                additionalProperties: false
            codeBlocks:
                type: string
                description: >-
                    How Sapphire should consider as a code block.

                    Valid options are:
                    
                    - braces: Uses curly braces ({}) as code blocks.
                    
                    - indentation: Use indentation to limit code block.
                    
                    - end: Use the end keyword to end a code block.
                enum: [indentation, braces, end]
            operatorNotation:
                type: string
                description: >-
                    This will change how Sapphire parse operators.

                    Valid options are:
                    
                    - infix: `a + b`
                    
                    - prefix: `+ a b`
                    
                    - postfix: `a b +`
                enum: [infix, prefix, postfix]
            oopModel:
              type: string
              enum: [class, prototype, hybrid]
            encapsulation:
              type: string
              enum: [enforced, pythonic]
        additionalProperties: false
    configVersion:
        type: number
    customOptions:
        type: object
        # & Is this too long and unnecessary? 
        # & It's probably too long and unnecessary...
        description: >-
            A field where you can assign it with anything you want. The only 
            requirement for this field is that it should be an object.

            This is intended for external tools, like linters, to put their own
            configurations into a single configuration file, for both convenience
            and cleanliness. Of course, other uses (aside for malicious purposes)
            are also welcome.

            It is recommended to make a schema to check for the fields inside of
            this file.
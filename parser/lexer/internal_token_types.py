# Should be Inteliisense-friendly
# Generated by a bot
# Beep bop
import itertools
import enum

_global_counter = itertools.count()

class ITTTypeChecking(enum.Enum):
    @staticmethod
    def _generate_next_value_(name, start, count, last_values):
        return next(_global_counter)

class InternalTokenType(ITTTypeChecking):
    Identifier = enum.auto()
    _SkipPattern = enum.auto()
    Arrow = enum.auto()
    EoF = enum.auto()
    NewLine = enum.auto()

    class Parentheses(ITTTypeChecking):
        OpenSquareBracket = enum.auto()
        CloseCurlyBrace = enum.auto()
        OpenParenthesis = enum.auto()
        CloseSquareBracket = enum.auto()
        CloseParenthesis = enum.auto()
        OpenCurlyBrace = enum.auto()

    class Symbols(ITTTypeChecking):
        EqualAndPercent = enum.auto()
        DoubleGreaterThan = enum.auto()
        Dot = enum.auto()
        EqualAndVerticalBar = enum.auto()
        SpaceCapsule = enum.auto()
        DoubleColon = enum.auto()
        Dash = enum.auto()
        CaretAndEqual = enum.auto()
        ForwardSlashAndEqual = enum.auto()
        At = enum.auto()
        VerticalBarAndEqual = enum.auto()
        DoubleForwardSlash = enum.auto()
        EqualAndDoubleAsterisk = enum.auto()
        Percent = enum.auto()
        AndpersandAndEqual = enum.auto()
        DoubleAsteriskAndEqual = enum.auto()
        TildaAndEqual = enum.auto()
        GreaterThan = enum.auto()
        Underscore = enum.auto()
        PercentAndEqual = enum.auto()
        DoubleDot = enum.auto()
        PlusAndEqual = enum.auto()
        VerticalBar = enum.auto()
        QuestionMark = enum.auto()
        DoubleEqual = enum.auto()
        BAndVerticalBarAndEqual = enum.auto()
        EqualAndAsterisk = enum.auto()
        EqualAndForwardSlash = enum.auto()
        DoubleAsterisk = enum.auto()
        ExclamationAndTildaAndEqual = enum.auto()
        Tilda = enum.auto()
        Asterisk = enum.auto()
        Equal = enum.auto()
        Semicolon = enum.auto()
        EqualAndDash = enum.auto()
        Colon = enum.auto()
        DoubleForwardSlashAndEqual = enum.auto()
        ColonAndEqual = enum.auto()
        GreaterThanAndEqual = enum.auto()
        EqualAndAt = enum.auto()
        EqualAndPlus = enum.auto()
        EqualAndCaret = enum.auto()
        AsteriskAndEqual = enum.auto()
        ForwardSlash = enum.auto()
        DashAndEqual = enum.auto()
        AtAndEqual = enum.auto()
        DoubleDash = enum.auto()
        Comma = enum.auto()
        DoubleDotAndEqual = enum.auto()
        EqualAndBAndAndpersand = enum.auto()
        Caret = enum.auto()
        EqualAndBAndVerticalBar = enum.auto()
        Plus = enum.auto()
        Andpersand = enum.auto()
        BAndCaretAndEqual = enum.auto()
        TripleDot = enum.auto()
        EqualAndDoubleForwardSlash = enum.auto()
        DoublePlus = enum.auto()
        DoubleLessThan = enum.auto()
        Exclamation = enum.auto()
        BAndAndpersandAndEqual = enum.auto()
        LessThan = enum.auto()
        EqualAndAndpersand = enum.auto()
        EqualAndBAndCaret = enum.auto()
        ExclamationAndEqual = enum.auto()
        EqualAndDoubleDot = enum.auto()
        LessThanAndEqual = enum.auto()

    class Keywords(ITTTypeChecking):
        Or = enum.auto()
        Not = enum.auto()
        Else = enum.auto()
        NotIn = enum.auto()
        Class = enum.auto()
        Match = enum.auto()
        Struct = enum.auto()
        If = enum.auto()
        Finally = enum.auto()
        Import = enum.auto()
        While = enum.auto()
        Return = enum.auto()
        Cfor = enum.auto()
        Continue = enum.auto()
        Elif = enum.auto()
        Enum = enum.auto()
        Break = enum.auto()
        And = enum.auto()
        Case = enum.auto()
        Scope = enum.auto()
        Del = enum.auto()
        Xor = enum.auto()
        Fn = enum.auto()
        Catch = enum.auto()
        Do = enum.auto()
        For = enum.auto()
        Is = enum.auto()
        IsNot = enum.auto()
        Throw = enum.auto()
        From = enum.auto()
        In = enum.auto()
        Const = enum.auto()
        As = enum.auto()
        Let = enum.auto()
        Try = enum.auto()

    class Primitives(ITTTypeChecking):
        Boolean = enum.auto()
        Int = enum.auto()
        Float = enum.auto()
        String = enum.auto()
        Null = enum.auto()